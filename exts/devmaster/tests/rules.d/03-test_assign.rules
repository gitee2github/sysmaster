# Description: test AssignOptionsStringEscapeNone
# Trigger: devctl trigger /dev/sda1
# Expect: set string escape to 'none'
KERNEL=="sda1", OPTIONS="string_escape=none"

# Description: test AssignOptionsStringEscapeReplace
# Trigger: devctl trigger /dev/sda1
# Expect: set string escape to 'replace'
KERNEL=="sda1", OPTIONS="string_escape=replace"

# Description: test AssignOptionsDbPersist
# Trigger: devctl trigger /dev/sda1
# Expect: set db 'b8:1' to persistence
KERNEL=="sda1", OPTIONS="db_persist"

# Description: test AssignOptionsWatch
# Trigger: devctl trigger /dev/sda1
# Expect: set watch to 'true'
KERNEL=="sda1", OPTIONS="watch"

# Description: test AssignOptionsWatch
# Trigger: devctl trigger /dev/sda1
# Expect: set watch to 'false'
KERNEL=="sda1", OPTIONS="nowatch"

# Description: test AssignOptionsDevlinkPriority
# Trigger: devctl trigger /dev/sda1
# Expect: set devlink priority to '-100'
KERNEL=="sda1", OPTIONS="link_priority=-100"

# Description: test AssignOwner, the owner name is formatted during rules executing
# Trigger: devctl trigger /dev/sda1
# Expect: assign uid '987' from owner 'tss'
KERNEL=="sda1", IMPORT{program}=="/bin/echo user=tss", OWNER="$env{user}"

# Description: test AssignOwner, the owner name is resolved during rules loading if 'resolve_name_time' is set to 'early'
# Trigger: devctl trigger /dev/sda1
# Expect:
#   1. libdevmaster::rules::rule_load /root/sysmaster/exts/devmaster/tests/rules.d/03-test_assign.rules:46:'OWNER="tss"' owner 'tss' is parsed into uid '987' during rules loading
#   2. libdevmaster::rules::rule_execute /root/sysmaster/exts/devmaster/tests/rules.d/03-test_assign.rules:46:'OWNER="tss"' assign uid '987'
KERNEL=="sda1", OWNER="tss"

# Description: test AssignOwnerId
# Trigger: devctl trigger /dev/sda1
# Expect: libdevmaster::rules::rule_execute /root/sysmaster/exts/devmaster/tests/rules.d/03-test_assign.rules:51:'OWNER="987"' assign uid '987'
KERNEL=="sda1", OWNER="987"

# Description: test AssignOwnerId, if OWNER is final-assigned previously, avoid assignment in future
# Trigger: devctl trigger /dev/sda1
# Expect: owner is final-assigned previously, ignore this assignment
KERNEL=="sda1", OWNER:="987", OWNER="0"

# Description: test AssignGroup, the group name is formatted during rules executing if 'resolve_name_time' is set to 'early'
# Trigger: devctl trigger /dev/sda1
# Expect:
#   1. libdevmaster::rules::rule_load /root/sysmaster/exts/devmaster/tests/rules.d/03-test_assign.rules:41:'OWNER="tss"' owner 'tss' is parsed into uid '987' during rules loading
#   2. libdevmaster::rules::rule_execute /root/sysmaster/exts/devmaster/tests/rules.d/03-test_assign.rules:56:'GROUP="tss"' assign gid '987'
KERNEL=="sda1", GROUP="tss"

# Description: test AssignGroupId
# Trigger: devctl trigger /dev/sda1
# Expect: assign gid '987'
KERNEL=="sda1", GROUP="987"

# Description: test AssignGroupId
# Trigger: devctl trigger /dev/sda1
# Expect: group is final-assigned previously, ignore this assignment
KERNEL=="sda1", GROUP:="987", GROUP="0"

# Description: test AssignMode
# Trigger: devctl trigger /dev/sda1
# Expect: assign mode '444'
KERNEL=="sda1", IMPORT{program}=="/bin/echo mode=444", MODE="$env{mode}"

# Description: test AssignModeId
# Trigger: devctl trigger /dev/sda1
# Expect: assign mode '444'
KERNEL=="sda1", MODE="444"

# Description: test AssignModeId with final-assign operator
# Trigger: devctl trigger /dev/sda1
# Expect: mode is final-assigned previously, ignore this assignment
KERNEL=="sda1", MODE:="444", MODE="666"

# Description: test AssignEnv with assigning operator
# Trigger: devctl trigger /dev/sda
# Expect: Capture stdout from command '/bin/echo test AssignEnv 1 test1': 'test AssignEnv 1 test1'
KERNEL=="sda", ENV{AssignEnv}="test1", PROGRAM=="/bin/echo test AssignEnv 1 $env{AssignEnv}"

# Description: test AssignEnv with add-assigning operator
# Trigger: devctl trigger /dev/sda
# Expect: Capture stdout from command '/bin/echo test AssignEnv 2 test1 test2': 'test AssignEnv 2 test1 test2'
KERNEL=="sda", ENV{AssignEnv}+="test2", PROGRAM=="/bin/echo test AssignEnv 2 $env{AssignEnv}"

# Description: test AssignEnv with add-assigning operator, and set the string escape type to 'replace'
# Trigger: devctl trigger /dev/sda
# Expect: Capture stdout from command '/bin/echo test AssignEnv 3 test1_test2_test3': 'test AssignEnv 3 test1_test2_test3'
KERNEL=="sda", OPTIONS="string_escape=replace", ENV{AssignEnv}+="test3", PROGRAM=="/bin/echo test AssignEnv 3 $env{AssignEnv}"
