# Description: test AssignOptionsStringEscapeNone
# Trigger: devctl trigger /dev/sda1
# Expect: set string escape to 'none'
KERNEL=="sda1", OPTIONS="string_escape=none"

# Description: test AssignOptionsStringEscapeReplace
# Trigger: devctl trigger /dev/sda1
# Expect: set string escape to 'replace'
KERNEL=="sda1", OPTIONS="string_escape=replace"

# Description: test AssignOptionsDbPersist
# Trigger: devctl trigger /dev/sda1
# Expect: set db 'b8:1' to persistence
KERNEL=="sda1", OPTIONS="db_persist"

# Description: test AssignOptionsWatch
# Trigger: devctl trigger /dev/sda1
# Expect: set watch to 'true'
KERNEL=="sda1", OPTIONS="watch"

# Description: test AssignOptionsWatch
# Trigger: devctl trigger /dev/sda1
# Expect: set watch to 'false'
KERNEL=="sda1", OPTIONS="nowatch"

# Description: test AssignOptionsDevlinkPriority
# Trigger: devctl trigger /dev/sda1
# Expect: set devlink priority to '-100'
KERNEL=="sda1", OPTIONS="link_priority=-100"

# Description: test AssignOwner, the owner name is formatted during rules executing
# Trigger: devctl trigger /dev/sda1
# Expect: assign uid '987' from owner 'tss'
KERNEL=="sda1", IMPORT{program}=="/bin/echo user=tss", OWNER="$env{user}"

# Description: test AssignOwner, the owner name is resolved during rules loading if 'resolve_name_time' is set to 'early'
# Trigger: devctl trigger /dev/sda1
# Expect:
#   1. libdevmaster::rules::rule_load /root/sysmaster/exts/devmaster/tests/rules.d/03-test_assign.rules:46:'OWNER="tss"' owner 'tss' is parsed into uid '987' during rules loading
#   2. libdevmaster::rules::rule_execute /root/sysmaster/exts/devmaster/tests/rules.d/03-test_assign.rules:46:'OWNER="tss"' assign uid '987'
KERNEL=="sda1", OWNER="tss"

# Description: test AssignOwnerId
# Trigger: devctl trigger /dev/sda1
# Expect: libdevmaster::rules::rule_execute /root/sysmaster/exts/devmaster/tests/rules.d/03-test_assign.rules:51:'OWNER="987"' assign uid '987'
KERNEL=="sda1", OWNER="987"

# Description: test AssignOwnerId, if OWNER is final-assigned previously, avoid assignment in future
# Trigger: devctl trigger /dev/sda1
# Expect: owner is final-assigned previously, ignore this assignment
KERNEL=="sda1", OWNER:="987", OWNER="0"

# Description: test AssignGroup, the group name is formatted during rules executing if 'resolve_name_time' is set to 'early'
# Trigger: devctl trigger /dev/sda1
# Expect:
#   1. libdevmaster::rules::rule_load /root/sysmaster/exts/devmaster/tests/rules.d/03-test_assign.rules:41:'OWNER="tss"' owner 'tss' is parsed into uid '987' during rules loading
#   2. libdevmaster::rules::rule_execute /root/sysmaster/exts/devmaster/tests/rules.d/03-test_assign.rules:56:'GROUP="tss"' assign gid '987'
KERNEL=="sda1", GROUP="tss"

# Description: test AssignGroupId
# Trigger: devctl trigger /dev/sda1
# Expect: assign gid '987'
KERNEL=="sda1", GROUP="987"

# Description: test AssignGroupId
# Trigger: devctl trigger /dev/sda1
# Expect: group is final-assigned previously, ignore this assignment
KERNEL=="sda1", GROUP:="987", GROUP="0"

# Description: test AssignMode
# Trigger: devctl trigger /dev/sda1
# Expect: assign mode '444'
KERNEL=="sda1", IMPORT{program}=="/bin/echo mode=444", MODE="$env{mode}"

# Description: test AssignModeId
# Trigger: devctl trigger /dev/sda1
# Expect: assign mode '444'
KERNEL=="sda1", MODE="444"

# Description: test AssignModeId with final-assign operator
# Trigger: devctl trigger /dev/sda1
# Expect: mode is final-assigned previously, ignore this assignment
KERNEL=="sda1", MODE:="444", MODE="666"

# Description: test AssignEnv with assigning operator
# Trigger: devctl trigger /dev/sda
# Expect: Capture stdout from command '/bin/echo test AssignEnv 1 test1': 'test AssignEnv 1 test1'
KERNEL=="sda", ENV{AssignEnv}="test1", PROGRAM=="/bin/echo test AssignEnv 1 $env{AssignEnv}"

# Description: test AssignEnv with add-assigning operator
# Trigger: devctl trigger /dev/sda
# Expect: Capture stdout from command '/bin/echo test AssignEnv 2 test1 test2': 'test AssignEnv 2 test1 test2'
KERNEL=="sda", ENV{AssignEnv}+="test2", PROGRAM=="/bin/echo test AssignEnv 2 $env{AssignEnv}"

# Description: test AssignEnv with add-assigning operator, and set the string escape type to 'replace'
# Trigger: devctl trigger /dev/sda
# Expect: Capture stdout from command '/bin/echo test AssignEnv 3 test1_test2_test3': 'test AssignEnv 3 test1_test2_test3'
KERNEL=="sda", OPTIONS="string_escape=replace", ENV{AssignEnv}+="test3", PROGRAM=="/bin/echo test AssignEnv 3 $env{AssignEnv}"

# Description: test AssignTag
# Trigger: devctl trigger /dev/sda
# Expect: Capture stdout from command '/bin/echo test AssignTag 1 tag1': 'test AssignTag 1 tag1'
KERNEL=="sda", TAG+="tag1", PROGRAM=="/bin/echo test AssignTag 1 $env{TAGS}"

# Description: test AssignTag
# Trigger: devctl trigger /dev/sda
# Expect: Capture stdout from command '/bin/echo test AssignTag 2 tag2': 'test AssignTag 2 tag2'
KERNEL=="sda", TAG="tag2", PROGRAM=="/bin/echo test AssignTag 2 $env{TAGS}"

# Description: test AssignTag, if operator is remove, remove the tag from current_tags but keep that in all_tags.
# Trigger: devctl trigger /dev/sda
# Expect: Capture stdout from command '/bin/echo test AssignTag 3 tag3:tag2 tag3': 'test AssignTag 3 tag3:tag2 tag3'
KERNEL=="sda", TAG+="tag3", TAG-="tag2", PROGRAM=="/bin/echo test AssignTag 3 $env{TAGS} $env{CURRENT_TAGS}"

# Description: test AssignName,
# Trigger: devctl trigger /sys/class/net/ens33
# Expect:
#   1. basic::naming_scheme Using net name scheme 'latest'
#   2. Capture stdout from command '/bin/echo test AssignName 1 hello_world': 'test AssignName 1 hello_world'
SUBSYSTEM=="net", NAME="hello/world", PROGRAM=="/bin/echo test AssignName 1 $name"

# Description: test AssignName,
# Trigger:
#   1. set environment variable 'NET_NAMING_SCHEME=v023'
#   2. devctl trigger /sys/class/net/ens33
# Expect:
#   1. basic::naming_scheme Using net name scheme 'v023'
#   2. Capture stdout from command '/bin/echo test AssignName 2 hello_world': 'test AssignName 2 hello_world'
SUBSYSTEM=="net", NAME="hello/world", PROGRAM=="/bin/echo test AssignName 2 $name"

# Description: test AssignName,
# Trigger:
#   1. set environment variable 'NET_NAMING_SCHEME=v000' or 'NET_NAMING_SCHEME=0'
#   2. devctl trigger /sys/class/net/ens33
# Expect:
#   1. basic::naming_scheme Using net name scheme 'v000'
#   2. Capture stdout from command '/bin/echo test AssignName 3 hello/world': 'test AssignName 3 hello/world'
SUBSYSTEM=="net", NAME="hello/world", PROGRAM=="/bin/echo test AssignName 3 $name"

# Description: test AssignDevlink
# Trigger: devctl trigger /dev/sda1
# Expect: Capture stdout from command '/bin/echo test AssignDevlink 1 /dev/by-disk/f6e86a53-01': 'test AssignDevlink 1 /dev/by-disk/f6e86a53-01'
KERNEL=="sda1", IMPORT{builtin}=="blkid", SYMLINK+="by-disk/$env{ID_PART_ENTRY_UUID}", PROGRAM=="/bin/echo test AssignDevlink 1 $env{DEVLINKS}"

# Description: test AssignDevlink
# Trigger: devctl trigger /dev/sda1
# Expect: Capture stdout from command '/bin/echo test AssignDevlink 2 /dev/bbb /dev/aaa /dev/by-disk/f6e86a53-01': 'test AssignDevlink 2 /dev/bbb /dev/aaa /dev/by-disk/f6e86a53-01'
KERNEL=="sda1", SYMLINK+="aaa bbb", PROGRAM=="/bin/echo test AssignDevlink 2 $env{DEVLINKS}"

# Description: test AssignDevlink, if escape is unset or set to 'replace', the token value will be treated as a single symlink
# Trigger: devctl trigger /dev/sda1
# Expect: Capture stdout from command '/bin/echo test AssignDevlink 2 /dev/aaa_bbb': 'test AssignDevlink 2 /dev/aaa_bbb'
KERNEL=="sda1", OPTIONS="string_escape=replace", SYMLINK="aaa bbb", PROGRAM=="/bin/echo test AssignDevlink 2 $env{DEVLINKS}"

# Description: test AssignDevlink, if escape is set to 'none', the token value will be split by whitespace
# Trigger: devctl trigger /dev/sda1
# Expect:
#   1. Capture stdout from command '/bin/echo test AssignDevlink 3 /dev/bbb /dev/aaa': 'test AssignDevlink 3 /dev/bbb /dev/aaa'
#   2. Capture stdout from command '/bin/echo test AssignDevlink 4 /dev/bbb /dev/aaa': 'test AssignDevlink 4 /dev/bbb /dev/aaa'
KERNEL=="sda1", SYMLINK="aaa bbb", PROGRAM=="/bin/echo test AssignDevlink 3 $env{DEVLINKS}"
KERNEL=="sda1", OPTIONS="string_escape=none", SYMLINK="aaa bbb", PROGRAM=="/bin/echo test AssignDevlink 4 $env{DEVLINKS}"

# Description: test ignoring rule line if its line type does not match the mask
# Trigger: devctl trigger /dev/sda
# Expect: 03-test_assign.rules:158: mask does not match, ignoring this line
KERNEL=="sda"

# Description: test AssignAttr, the attribute uses '[<subsys>/<sysname>]<attr>' format.
# Trigger: devctl trigger /dev/sda2
# Expect:
#   1. ATTR '/sys/devices/pci0000:00/0000:00:10.0/host2/target2:0:1/2:0:1:0/block/sdb/uevent' is set to 'change'
#   2. Capture stdout from command '/bin/echo test AssignAttr': 'test AssignAttr'
KERNEL=="sda2", ATTR{[block/sdb]uevent}="change"
ACTION=="change", KERNEL=="sdb", PROGRAM=="/bin/echo test AssignAttr"

# Description: test AssignAttr
# Trigger: devctl trigger /dev/sdb --action add
# Expect:
#   1. ATTR '/sys/devices/pci0000:00/0000:00:10.0/host2/target2:0:1/2:0:1:0/block/sdb/uevent' is set to 'change'
#   2. Capture stdout from command '/bin/echo test AssignAttr 2': 'test AssignAttr 2'
ACTION=="add", KERNEL=="sdb", ATTR{uevent}="change"
ACTION=="change", KERNEL=="sdb", PROGRAM=="/bin/echo test AssignAttr 2"

# Description: test AssignRunProgram, if run type is not set, the default type is program
# Trigger: devctl trigger /dev/sda
# Expect:
#   1. insert Run program '/bin/echo test AssignRunProgram 1'
#   2. Running program '/bin/echo test AssignRunProgram 1'
#   3. Process 2866513 exited with status ExitStatus(unix_wait_status(0))
KERNEL=="sda", RUN="/bin/echo test AssignRunProgram 1"

# Description: test AssignRunProgram
# Trigger: devctl trigger /dev/sda
# Expect:
#   1. insert Run program '/bin/echo test AssignRunProgram 1'
#   2. Running program '/bin/echo test AssignRunProgram 1'
#   3. Process <PID> exited with status ExitStatus(unix_wait_status(0))
KERNEL=="sda", RUN+="/bin/echo test AssignRunProgram 1"

# Description: test AssignRunProgram
# Trigger: devctl trigger /dev/sda
# Expect:
#   1. insert Run program '/bin/echo test AssignRunProgram 2'
#   2. Running program '/bin/echo test AssignRunProgram 2'
#   3. Process <PID> exited with status ExitStatus(unix_wait_status(0))
KERNEL=="sda", RUN{program}+="/bin/echo test AssignRunProgram 2"

# Description: test AssignRunBuiltin
# Trigger: devctl trigger /dev/sda
# Expect:
#   1. insert Run builtin 'blkid'
#   2. Running builtin command 'blkid'
KERNEL=="sda", RUN{builtin}="blkid"

# Description: test AssignRunBuiltin
# Trigger: devctl trigger /dev/sda
# Expect:
#   1. insert Run builtin 'blkid'
#   2. Running builtin command 'blkid'
KERNEL=="sda", RUN{builtin}+="blkid"

# Description: test AssignRun, if final-assigned, neither program nor run list can insert more command
# Trigger: devctl trigger /dev/sda
# Expect:
#   1. insert Run program '/bin/echo test AssignRun final-assigned'
#   2. Running program '/bin/echo test AssignRun final-assigned'
#   3. Process <PID> exited with status ExitStatus(unix_wait_status(0))
KERNEL=="sda", RUN:="/bin/echo test AssignRun final-assigned"
KERNEL=="sda", RUN+="/bin/echo test AssignRun final-assigned 1"
KERNEL=="sda", RUN{builtin}+="blkid"
